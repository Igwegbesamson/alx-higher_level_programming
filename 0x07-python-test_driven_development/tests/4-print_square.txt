
============================
how to use 4-print_square.py
============================

this module defines a square-printing function ``print_square(size)``.

usage
=====

squares are printed using the ``#`` character. the parameter ``size``
represents the height and width of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

if ``size`` is zero, the function prints nothing.

::

    >>> print_square(0)

invalid sizes
=============

the parameter ``size`` must be an integer. otherwise, a typeerror is raised.

::

    >>> print_square("not an int")
    traceback (most recent call last):
    typeerror: size must be an integer

::

    >>> print_square(5.5)
    traceback (most recent call last):
    typeerror: size must be an integer

::

    >>> print_square(none)
    traceback (most recent call last):
    typeerror: size must be an integer

if ``size`` is less than zero, a valueerror is raised.

::

    >>> print_square(-7)
    traceback (most recent call last):
    valueerror: size must be >= 0

note that type-checking occurs before value-checking.

::

    >>> print_square(-7.5)
    traceback (most recent call last):
    typeerror: size must be an integer

at least one argument must be provided.

::

    >>> print_square()
    traceback (most recent call last):
    typeerror: print_square() missing 1 required positional argument: 'size'
